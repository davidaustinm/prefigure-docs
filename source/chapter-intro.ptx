<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="chap-introduction" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Introduction</title>

  <introduction>
    <p> PreFigure is an authoring system for creating mathematical
    diagrams that is inspired by the
    <url href="http://pretextbook.org/" visual="pretextbook.org"
	 target="_blank">
      <pretext/> authoring system 
    </url>
    for creating scholarly documents.  In particular, <pretext/> is
    guided by a <url
    href="https://pretextbook.org/doc/guide/html/philosophy.html#list-principles"
    target="blank">set of principles</url> that similarly inform the
    design of PreFigure.
    </p>

    <p> This introductory chapter explains some of PreFigure's
    features and why an author might choose to use it.  Later chapters
    provide more details for authors as well as discussion of best
    practices for designing diagrams.
    </p>

  </introduction>

  <section xml:id="sec-example">
    <title> An example diagram </title>

    <p> <xref ref="diagram-tangent"/> contains a diagram that could
    appear in a calculus textook and that is
    authored in PreFigure.
    </p>

    <figure xml:id="diagram-tangent">
      <caption> A calculus diagram created with PreFigure</caption>
      <sidebyside width="60%">
	<image source="images/tangent"/>
      </sidebyside>
    </figure>

    <p> Like <pretext/>, PreFigure is a markup language that is
    designed to reflect the structure of mathematical diagrams.  
    The PreFigure source for creating
    this diagram is given in <xref ref="listing-tangent"/>.
    </p>

    <listing xml:id="listing-tangent">
      <program>
	<input><xi:include href="code/tangent.xml" parse="text"/>
	</input>
      </program>
      <caption> The PreFigure source to produce
      <xref ref="diagram-tangent"/>
      </caption>
    </listing>
    
    <p> PreFigure provides an XML vocabulary that allows an author to
    describe the components of a mathematical diagram and how they
    relate to one another in an intuitive way.  The <tag>diagram</tag>
    element delimits all of the PreFigure input.
    </p>

    <p>
    Notice that
    the graphical components of the diagram in <xref
    ref="diagram-tangent"/> include a grid, two 
    axes, the graph of a function, the tangent line to the function at
    some point, and the point itself.  The PreFigure source includes
    an XML element for each of these components.
    </p>

    <p>
    The <tag>coordinates</tag> element defines our window into the
    <m>xy</m>-plane while the label is included inside the
    <tag>point</tag> element to which it is attached and wrapped in an
    <tag>m</tag> element so that it will be processed by MathJax.
    </p>

    <p> In addition, authors may define mathematical objects, such as
    a real number <m>a</m> and a function <m>f(x)</m>, which are to be
    used in the construction of subsequent graphical components.
    </p>

    <p> Following the <pretext/> paradigm, PreFigure makes stylistic
    decisions about the appearance of graphical components so that
    authors can focus on the structure of their diagram.  
    Authors can, however, override these decisions to modify
    the visual appearance of a diagram.  Authors may also provide a
    publisher file setting their own defaults so that, for instance,
    all the diagrams in a textbook have a common visual style (yet to
    be implemented).
    </p>

    <p> PreFigure XML source is processed by a Python package to
    create output images in the SVG format.  As a result, diagrams
    will scale to an appropriate size when included in a document
    without sacrifiing quality or visual information.
    </p>

  </section>

  <section xml:id="sec-accessibility">
    <title> Accessibility </title>

    <p>
      PreFigure prioritizes the creation of accessible mathematical
      diagrams.  In particular, authors can easily include annotations
      that control how a reader can navigate a diagram using a screen
      reader.
    </p>

    <figure xml:id="diagram-tangent-annotate">
      <sidebyside width="60%">
	<image source="images/tangent-annotate"/>
      </sidebyside>
      <caption> An annotated version of <xref ref="diagram-tangent"/>
      </caption>
    </figure>

    <p> (To be implemented) A reader may explore <xref
    ref="diagram-tangent-annotate"/> using a screen reader by first
    sending the focus to the diagram by either clicking in the diagram
    or pressing the tab key sufficiently many times.  The arrow keys
    are then used to explore the diagram in more detail.  For
    instance, the Down and Up arrow keys produce more or less detail
    while the Left and Right arrow keys focus on components at the
    same level.  The annotations are read using the <c>diagcess</c>
    library created by
    <url
	href="https://www.birmingham.ac.uk/staff/profiles/computer-science/academic-staff/sorge-volker"
	target="blank"> Volker Sorge</url>.
    </p>
      
    <p> The modifications to the PreFigure source needed to produce
    the annotations are shown in <xref
    ref="listing-tangent-annotate"/>.
    </p>

    <listing xml:id="listing-tangent-annotate">
      <program>
	<input><xi:include href="code/tangent-annotate.xml" parse="text"/>
	</input>
	<caption> The PreFigure source for the annotated diagram
	</caption>
      </program>
    </listing>

    <p> Notice that important graphical components are given an
    <attr>at</attr> attribute, which serves as a handle to be used by the
    annotations.  The <tag>annotations</tag> element contains a tree
    of <tag>annotations</tag> whose structure specifies how the screen
    reader will respond to arrow presses.  An <tag>annotation</tag>
    element contains a reference to the handle of a graphical
    component, which specifies how the components are highlighted.
    </p>

    <p>
      Furthermore, as seen in <xref
      ref="diagram-tangent-tactile"/> authors can create, from the
      same XML source, tactile versions of diagrams, including braille
      labels, suitable for embossing and including in a braille
      document.
    </p>

    <figure xml:id="diagram-tangent-tactile">
      <sidebyside width="80%">
	<image source="images/tangent-tactile"/>
      </sidebyside>
      <caption> A tactile version produced from the XML source in
      <xref ref="listing-tangent"/>.
      </caption>
    </figure>

    <p> Indeed, the difficulty in creating tactile diagrams that
    emboss well was one of the original motivations of the PreFigure
    project.
    </p>
      
  </section>

  <section xml:id="sec-gallery">
    <title> A gallery of diagrams </title>

    <p> We include a sampling of diagrams created with PreFigure to
    give a sense of the possibilities.
    </p>

    <figure>
      <sbsgroup>
	<sidebyside widths="45% 45%">
	  <image source="images/derivatives"/>
	  <image source="images/implicit"/>
	</sidebyside>
	<sidebyside widths="45% 45%">
	  <image source="images/diffeqs"/>
	  <image source="images/projection"/>
	</sidebyside>
	<sidebyside widths="45% 45%">
	  <image source="images/roots_of_unity"/>
	  <image source="images/network"/>
	</sidebyside>
	<sidebyside width="60%">
	  <image source="images/riemann"/>
	</sidebyside>
      </sbsgroup>
    </figure>

  </section>

  <section xml:id="sec-installation">
    <title> Installation and use </title>

    <p>
      PreFigure may be used in two different ways.
      <ol>
	<li>
	  <p>PreFigure is available in a
	  <url href="https://github.com/davidaustinm/prefigure-codespace"
	       target="_blank"> GitHub Codespace.</url>  For many
	  users, this will be a convenient way to create figures since
	  it provides a fully configured authoring environment.  More
	  information is available at that link.
	  </p>
	</li>
	<li>
	  <p>PreFigure may also be installed as a Python package on
	  your own machine. There are, however, a few additional
	  steps required so be sure to follow the
	  <url href="https://github.com/davidaustinm/prefigure"
	       target="_blank">
	    instructions given here.
	  </url>
	  </p>
	</li>
      </ol>
    </p>

    <p> From a codespace or once installed, PreFigure can be called
    from the command line.  General help is available with

    <console>
      <input>
	prefig --help
      </input>
    </console>
    </p>

    <p> and help for specific commands can be found with, for instance,
    <c>prefig build --help</c>.
    </p>

    <p> These are the available PreFigure commands:
    <dl>
      <li><title>build</title>
      
	<p> To compile a PreFigure source file <c>foo.xml</c>
	into a diagram, use either
	<cd>
prefig build foo.xml
prefig build -f tactile foo.xml
	</cd>
	where the second command builds a tactile version.
	In either case, the output image will appear in
	<c>output/foo.svg</c> while annotations read by a screen
	reader are in
	<c>output/foo.xml</c>. 
	</p>
      </li>

      <li><title>view</title>
	<p> Once an image is built, it may be viewed in a web browser
	with 
	<cd>
prefig view foo
	</cd>
	If the diagram contains annotations, this will provide a means
	of exploring the diagram and annotations using the
	<c>diagcess</c> library.  To view the diagram without
	annotations, use
	<c>prefig view -i foo</c>
	to ignore the annotations.
	</p>

	<p>The view command offers some flexibility since the
	PreFigure source and the SVG output appear 
	in different directories.  For instance, if the PreFigure
	source appears in, say, <c>examples/tangent.xml</c>, we can
	use
	<cd>
prefig build examples/tangent.xml	  
prefig view tangent
	</cd>
	PreFigure looks for <c>tangent.svg</c> in the current
	directory or some subdirectory.  Alternatively, you could say
	<cd>
prefig view examples/tangent.xml
	</cd>
	</p>
	  
      </li>

      <li><title>pdf</title>
	<p> To make a PDF from a diagram that has already been built,
	use 
	<cd>
prefig pdf foo
	</cd>
	Including the <c>-b</c> flag will cause the diagram to be
	built first:
	<c>prefig pdf -b foo</c>.
	</p>

	<p>Use of <c>prefig pdf</c> assumes that <c>rsvg-convert</c>
	is installed, which it provided in a codespace.  The use of
	<c>rsvg-convert</c> ensures that tactile diagrams are
	well suited for embossing.  There are
	options for choosing the resolution of the resulting PDF, but
	tactile diagrams should always be converted with a resolution
	of 72 dpi, which is the default.
	</p>
      </li>

      <li><title>init</title>
	<p>It is not essential to do this, but if PreFigure is
	installed locally, you may want to begin with
	<c>prefig init</c>,
	which has the effect of installing some MathJax libraries
	(PreFigure will try to install these later when needed) as
	well as the Braille29 font, which is required to create
	tactile diagrams for embossing.
	</p>
      </li>

      <li><title>new</title>

	<p>You may initialize a new PreFigure project with
	<c>prefig new</c>.
	This copies a simple publication file and the diagcess library
	files into the current directory.  PreFigure work done within
	this directory and any subdirectories will be able to find
	these when needed.
	</p>
      </li>

      <li><title>examples</title>
	<p>If you would like to explore the set of included examples,
	use 
	<c>prefig examples</c>
	to copy the set of examples into the current directory.
	</p>
      </li>
    </dl>
    </p>
  </section>

</chapter>
