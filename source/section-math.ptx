<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-math" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Mathematical operations</title>

  <introduction>
  <p>As we've seen, PreFigure allows us to define some quantities,
  often using mathematical operations, and then reuse them.  Here we
  summarize the set of mathematical operations that are possible.
  PreFigure is written in Python, and authors who are familiar with that
  language may be able to imagine what is possible.
  </p>
  </introduction>

  <subsection xml:id="subsec-math">
    <title>Math operations</title>

    <p>PreFigure provides access to Python's <c>math</c> module, which
    means that constants such as <c>pi</c> and <c>e</c> are available,
    as well as functions such as <c>sin</c>, <c>cos</c>, <c>acos</c>,
    <c>atan</c>, and <c>atan2</c>.  By default, any trigonometric
    functions use radians, but the functions
    <c>degrees</c> and <c>radians</c> will convert back and forth.
    </p>

    <p> These functions are available without the <c>math.</c> prefix
    so that we can say, for instance, <c>cos(pi/6)</c>.
    See the <url href="https://docs.python.org/3/library/math.html">
    Python documentation</url> for a full list of functions that are
    available.
    </p>

    <p>The natural logarithm in Python is given by <c>log</c>, but
    <prefigure/> also allows <c>ln</c>.  The base-10 logarithm is
    <c>log10</c>.</p>

    <p>Some operations from discrete math, such as <c>comb(n,k)</c>
    for <m>n\choose k</m>, are also available.
    </p>

    <p>In addition, if a function <c>f(x)</c> has been previously
    defined, then <c>fp(x)=deriv(f,x)</c> will be its derivative.  For
    functions of several variables, say, <c>g(x,y)</c>, the gradient
    is defined by <c>dg(x,y)=grad(g,(x,y))</c>.</p>

    <p>There may be times when a diagram contains, say, a point
    defined as <c>p=(2,-3)</c> and a two-variable function
    <c>f(x,y)=x+y</c>.  Mathematically, it is natural to evaluate
    <c>f</c> at the point <c>p</c>.  Ordinarily, this would have to be
    represented as <c>f(p[0],p[1])</c>.  However, Python provides the
    <c>*</c> operator, which does the work of <q>unpacking</q> the
    coordinates so that <c>f(*p)</c> has the same effect.  This is
    demonstrated in <xref ref="listing-grad-field"/>.</p>

  </subsection>

  <subsection>
    <title>Intersections</title>

    <p>The <c>intersect</c> function is overloaded to handle a variety
    of cases.  While this may seem confusing, the syntax is meant to
    be natural within specific applications.
    <ul>
      <li><p>The intersection of two lines <c>L1</c> and <c>L2</c>,
      defined by pairs of points is given by
      <c>intersect( (L1, L2) )</c>.  This variant will return a
      two-dimensional point, as 
      demonstrated in <xref ref="listing-line-intersections"/>.</p>
      </li>

      <li><p>The intersection of two graphs defined by functions
      <c>f</c> and <c>g</c> is found by <c>intersect( (f,g), x0)</c>
      where <c>x0</c> is a point relatively close to the desired
      intersection point.  This variant of the function returns the
      value of <m>x</m> for which <m>f(x)=g(x)</m>.  One use is
      illustrated in <xref ref="listing-area-integral"/>.</p>
      </li>

      <li><p>To find a value of <m>x</m> where <m>f(x)=y_0</m>, use
      <c>intersect( (f, y0), x0)</c> where <c>x0</c> is a point
      relatively near the solution.</p>
      </li>

      <li><p>To find a zero <m>f(x)=0</m>, one may use the previous
      construction <c>intersect( (f,0), x0)</c> or
      <c>intersect(f, x0)</c>, as demonstrated in
      <xref ref="listing-newton"/>.</p> 
      </li>
    </ul>
    </p>

    <p>When solving an equation <m>f(x)=g(x)</m>, <prefigure/> looks
    for a solution within the current bounding box.  For this reason,
    it is usually wise to use the <c>intersect</c> function within the
    relevant <tag>coordinates</tag> element.  However, an 
    interval can be provided as an optional argument, as in
    <c>intersect((f,g), x0, (-2,1))</c>, to override this behavior.
    </p>
  </subsection>
  

  <subsection>
    <title>Vector operations</title>

    <p>Vector operations may be defined on previously-defined lists or
    tuples.  For instance, if we define
    <c>u=(1,2)</c> and <c>v=(-2,4)</c>, we can later say <c>u+v</c>
    and <c>-3*u</c>.
    (Behind the scenes, any list or tuple that is defined is
    interpreted as a <c>numpy</c> array.)
    </p>

    <p>Similarly, a <m>2\times2</m> matrix may be defined with
    <cd>
A = [[1,2],[2,1]]      
    </cd>
    and then used to multiply a vector with <c>A @ v</c>.
    </p>

    <p>Some additional operations include:
    <dl>
      <li><title>length</title>
      <p><c>length(u)</c> finds the length of the vector <c>u</c>.
      </p>
      </li>

      <li><title>normalize</title>
      <p><c>normalize(u)</c> gives a vector paralle to <c>u</c> and
      having unit length.
      </p>
      </li>

      <li><title>dot</title>
      <p><c>dot(u, v)</c> finds the dot product of <c>u</c> and
      <c>v</c>.
      </p>
      </li>

      <li><title>midpoint</title>
      <p><c>midpoint(u, v)</c> gives the midpoint of the line segment
      from <c>u</c> to <c>v</c>.
      </p>
      </li>

      <li><title>angle</title>
      <p><c>angle(u)</c> finds the angle, in radians, between the
      vector and the positive <m>x</m>-axis.
      </p>
      </li>

    </dl>
    </p>
  </subsection>

  <subsection>
    <title>List operations</title>

    <p>It can be convenient to modify existing lists.  For instance,
    to add an element <c>a</c> to an existing <c>list</c>, we could say
    <c>append(list, a)</c>.  This could be used, for instance, to
    implement Euler's method, as shown in <xref ref="diagram-euler"/>.
    Of course, <xref ref="subsec-euler"/> provides an easier way to
    illustrate Euler's method, but authors will undoubtedly find uses
    for the <c>append</c> function.
    </p>

    <figure xml:id="diagram-euler">
      <sidebyside width="60%">
	<image source="images/euler"/>
      </sidebyside>
      <caption>An implementation of Euler's method</caption>
    </figure>

    <listing xml:id="listing-euler">
      <program>
	<code><xi:include href="code/euler.xml" parse="text"/></code>
      </program>
      <caption>The PreFigure source for <xref
      ref="diagram-euler"/>.</caption>
    </listing>
  
    <p>If <c>list=(a,b,c)</c>, then <c>roll(list)</c> will be the list
    <c>(b,c,a)</c>.  This can be useful for visiting each of the
    vertices in a polygon, for instance, as shown in <xref
    ref="diagram-roll"/>.  
    </p>

    <figure xml:id="diagram-roll">
      <sidebyside width="60%">
	<image source="images/roll"/>
      </sidebyside>
      <caption>Adding angle markers to a polygon</caption>
    </figure>

    <listing xml:id="listing-roll">
      <program>
	<code><xi:include href="code/roll.xml" parse="text"/></code>
      </program>
      <caption>The PreFigure source for <xref
      ref="diagram-roll"/>.</caption>
    </listing>

  </subsection>

</section>

