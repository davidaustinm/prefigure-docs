<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-graphical-attr">
  <title> Stroke, fill, and other graphical attributes</title>

  <introduction>  
    <p> We begin this chapter with a 
    discussion of attributes common to all 
    graphical elements.  Many attributes modify
    properties that are either <m>1</m>- or
    <m>2</m>-dimensional.  For instance, a <tag>graph</tag> will
    consist of a curve with an attribute <attr>stroke</attr> that
    determines its color.  A <tag>polygon</tag> also has a
    <attr>stroke</attr> attribute that determines the color of the
    boundary of the polygon.  It also has a <attr>fill</attr>
    attribute that determines the color used to shade the
    <m>2</m>-dimensional region enclosed by the <tag>polygon</tag>.
    </p>
  </introduction>
  
  <subsection xml:id="subsec-colors">
    <title> Colors </title>
    
    <p>There are several ways to specify a color, the most simple
    being to use its name, such as <attr>stroke="blue"</attr>.
    Alternatively, one may specify the red, green, and blue
    components either in hexadecimal, <attr>fill="#rrggbb"</attr> or
    <attr>fill="#rgb"</attr>, or decimal,
    <attr>fill="rgb(r,g,b)"</attr>, where each value is between 0
    and 255.  Some examples are shown in <xref
    ref="diagram-stroke"/>.  
    </p>
    
    <figure xml:id="diagram-stroke">
      <sidebyside width="60%">
	<image source="images/stroke"/>
      </sidebyside>
      <caption> Some color choices </caption>
    </figure>
    
    <p>Color should be used judiciously, and the colors used in a
    single diagram should contrast highly with one another.  If you
    find that you are using a lot of colors, perhaps the idea you
    are communicating could be better expressed in another way, such
    as a series of linked diagrams.
    </p>
  </subsection>
  
  <subsection xml:id="subsec-stroke-attributes">
    <title> Stroke attributes</title>
    
    <p> The two most important attributes you will use are
    <attr>stroke</attr> and <attr>thickness</attr>.  All the
    possible stroke attributes are described here roughly in order
    of importance.  You will likely never need the attributes toward
    the end of this list.
    </p>
    
    <dl>
      <li><title>Stroke</title>
      <p> The <attr>stroke</attr> attribute determines the color used
      to draw <m>1</m>-dimensional components, as demonstrated in
      <xref ref="diagram-stroke"/>.  For instance,
      <attr>stroke="blue"</attr> will cause the <m>1</m>-dimensional
      component of the element to be rendered in blue.  If the
      attribute has the value <attr>stroke="none"</attr>, then the
      <m>1</m>-dimensional component of the element will not appear.
      </p> 
      
      <p> Note that tactile diagrams are rendered with
      <attr>stroke="black"</attr> 
      to guarantee predictable behavior when embossed.
      </p>
      </li>
      
      <li><title>Thickness</title>
      <p>The attribute <attr>thickness</attr> determines the width of
      the <m>1</m>-dimensional component in SVG coordinates.  That is,
      if a graphical element has the attribute
      <attr>thickiness="1"</attr> in a diagram whose dimensions are
      <m>300x300</m>, then the width of the corresponding graphical
      component will be <m>1/300^{th}</m> of size of the diagram.
      <xref ref="diagram-thickness"/> demonstrates different
      thicknesses. 
      </p>
      
      <figure xml:id="diagram-thickness">
	<sidebyside width="100%">
	  <image source="images/thickness"/>
	</sidebyside>
	<caption>Stroking with various thicknesses</caption>
      </figure>
      </li>
      
      <p>Many graphical elements, such as graph and lines,
      have a default <attr>@thickness=2</attr>.
      </p>
      
      <li><title>Dash</title>
      <p>Use the <attr>dash</attr> attribute to 
      create dashed lines as shown in <xref ref="diagram-dash"/>.
      
      </p>
      <figure xml:id="diagram-dash">
	<sidebyside width="100%">
	  <image source="images/dash"/>
	</sidebyside>
	<caption>Dashed lines</caption>
      </figure>
      
      <p>In a tactile diagram, the <attr>dash</attr> attribute is
      useful for distinguishing different graphical components.
      Feedback from users indicates that <attr>dash="9 9"</attr> is
      a good choice as the dashes and spaces are <m>1/8^{th}</m> of
      an inch.
      </p>
      </li>
      
      <li><title>Opacity</title>
      <p>Transparency is available using the <attr>opacity</attr>
      attribute.  The value should be between 0.0 and 1.0 with 1.0,
      the default, being entirely opaque.  This attribute applied to
      both the <attr>stroke</attr> and <attr>fill</attr> of a
      graphical component.  If the opacity is meant to be applied to
      only the stroke, use <attr>stroke-opacity</attr>.
      </p>
      
      <figure xml:id="diagram-opacity">
	<sidebyside width="100%">
	  <image source="images/opacity"/>
	</sidebyside>
	<caption>These lines have <attr>stroke="blue"</attr> and
	varying opacities</caption>
      </figure>
      </li>
      
      <li><title>Miterlimit</title>
      
      <p> On rare occasions, you may find that you need to adjust the
      <attr>miterlimit</attr> attribute.  As seen in <xref
      ref="diagram-miterlimit"/>, it sometimes happens that a small
      angle produces a sharp point.  The point can be removed by
      lowering the <attr>miterlimit</attr> attribute from its
      default value of 4.
      </p>
      
      <figure xml:id="diagram-miterlimit">
	<sidebyside width="100%">
	  <image source="images/miterlimit"/>
	</sidebyside>
	<caption>Lowering the <attr>miterlimit</attr> causes sharp
	points to be blunted</caption>
      </figure>
      </li>
      
      <li><title>Linejoin</title>
      
      <p>The <attr>linejoin</attr> attribute determines how
      lines are joined.  The default value is
      <attr>linejoin="miter"</attr>, whose behavior is controlled
      with the <attr>miterlimit</attr> attribute described above.
      However, this can 
      be changed as shown in <xref ref="diagram-linejoin"/>.
      </p>
      
      <figure xml:id="diagram-linejoin">
	<sidebyside width="100%">
	  <image source="images/linejoin"/>
	</sidebyside>
	<caption>Various choices for the <attr>linejoin</attr>
	attribute</caption> 
      </figure>
      </li>
      
      <li><title>Linecap</title>
      
      <p>The <attr>linecap</attr> attribute determines how
      lines are capped at their ends.  The default value is
      <attr>linecap="butt"</attr> with the other options
      shown in <xref ref="diagram-linecap"/>.  The option
      <attr>linecap="square"</attr> causes a square to added to the
      end of the line, which extends it slightly.
      </p>
      
      <figure xml:id="diagram-linecap">
	<sidebyside width="100%">
	  <image source="images/linecap"/>
	</sidebyside>
	<caption>Options for <attr>linecap</attr></caption>
      </figure>
      </li>
      
    </dl>
  </subsection>
  
  <subsection>
    <title>Fill attributes</title>
    
    <p> Similarly, there are a few attributes to describe the
    properties used to fill a region.</p>
    
    <dl>
      <li><title>Fill</title>
      
      <p>The <attr>fill</attr> specifies the color used to fill a
      region, as seen in <xref ref="diagram-fill"/>.
      </p>
      
      <figure xml:id="diagram-fill">
	<sidebyside width="100%">
	  <image source="images/fill"/>
	</sidebyside>
	<caption>Squares filled with <attr>fill="red"</attr>, blue,
	and green.
	</caption>
      </figure>
      
      <p> Tactile diagrams are rendered with
      <attr>fill="lightgray"</attr> to create a consistent texture. 
      </p>
      </li>
      
      <li><title>Fill opacity</title>
      
      <p> The <attr>fill-opacity</attr> attribute provides a given
      degree of transparency, as demonstrated in <xref
      ref="diagram-fill-opacity"/>.
      </p>
      
      <figure xml:id="diagram-fill-opacity">
	<sidebyside width="100%">
	  <image source="images/fill-opacity"/>
	</sidebyside>
	<caption>Squares filled with
	<attr>fill-opacity="1.0"</attr>, 0.6, and 0.2.
	</caption>
      </figure>
      </li>
      
      <li><title>Fill rule</title>
      
      <p> The <attr>fill-rule</attr> attribute determines how
      more complicated regions are filled,
      as demonstrated in <xref
      ref="diagram-fill-rule"/>.
      </p>
      
      <figure xml:id="diagram-fill-rule">
	<sidebyside width="100%">
	  <image source="images/fill-rule"/>
	</sidebyside>
	<caption>Shapes filled with
	<attr>fill-rule="nonzero"</attr>, the default, and evenodd.
	</caption>
      </figure>
      </li>
      
    </dl>
    
  </subsection>
  
  <subsection>
    <title>Handles</title>
    
    <p> In <xref ref="sec-accessibility"/>, we described how
    graphical elements can have an identifying handle, given by the
    value of its <attr>at</attr> attribute, by which they may be
    referenced from within an annotation.  For instance,
    <attr>at="function-f"</attr> provides an identification of this
    graphical element.
    </p>
    
    <p> If you look inside an SVG image file created by PreFigure,
    you will see that the handles are converted into <attr>id</attr>
    attributes, and it is perfectly fine to use
    <attr>id="function-f"</attr> rather than the <attr>at</attr>
    attribute.  The <attr>at</attr> attribute is provided to avoid
    any confusion with <attr>xml:id</attr> attributes.
    </p>
    
    <p>As we now begin to describe different types of graphical
    components, we will occasionally need to describe how a component's
    handle is processed.
    </p>
    
  </subsection>
</section>
